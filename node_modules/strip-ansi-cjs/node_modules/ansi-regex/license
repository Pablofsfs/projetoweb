 variable contains a reference, use the
L<C<ref>|perlfunc/ref EXPR> function.  It returns true if its argument
is a reference.  Actually it's a little better than that: It returns
C<HASH> for hash references and C<ARRAY> for array references.

=item *

If you try to use a reference like a string, you get strings like

	ARRAY(0x80f5dec)   or    HASH(0x826afc0)

If you ever see a string that looks like this, you'll know you
printed out a reference by mistake.

A side effect of this representation is that you can use
L<C<eq>|perlop/Equality Operators> to see if two references refer to the
same thing.  (But you should usually use
L<C<==>|perlop/Equality Operators> instead because it's much faster.)

=item *

You can use a string as if it were a reference.  If you use the string
C<"foo"> as an array reference, it's taken to be a reference to the
array C<@foo>.  This is called a I<symbolic reference>.  The declaration
L<C<use strict 'refs'>|strict> disables this feature, which can cause
all sorts of trouble if you use it by accident.

=back

You might prefer to go on to L<perllol> instead of L<perl